#server
server.port = 8888


#数据库设置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.url=jdbc:mysql://www.maijinta.top:3306/blog?characterEncoding=UTF-8&useUnicode=true&useSSL=false
spring.datasource.username=frank
spring.datasource.password=Frank315!
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.driverClassName = com.mysql.jdbc.Driver
jdbc.location=/Users/frank/IdeaProjects/SpringBoot_Resume/src/main/resources/library/mysql-connector-java-5.1.39-bin.jar


## Mybatis 配置
#mybatis.typeAliasesPackage=com.frank.model
mybatis.mapperLocations=classpath:mapper/*.xml


#--------------------------
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize = 5
spring.datasource.minIdle = 5
spring.datasource.maxActive = 20
# 配置获取连接等待超时的时间
spring.datasource.maxWait = 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis = 300000
spring.datasource.validationQuery = SELECT 1 FROM DUAL
spring.datasource.testWhileIdle = true
spring.datasource.testOnBorrow = false
spring.datasource.testOnReturn = false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements = true
spring.datasource.maxPoolPreparedStatementPerConnectionSize = 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters = stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties = druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
#-------------------------------------

#添加那个目录的文件需要restart
spring.devtools.restart.additional-paths=src/main/java
#排除那个目录的文件不需要restart
#spring.devtools.restart.exclude=static/**,public/**

#log
debug=true
logging.config = classpath:logback-spring.xml
#配置完成日志记录的级别控制
#logging.level.* = DEBUG
logging.file = blog.log
#会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）
spring.output.ansi.enabled = DETECT

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=139.129.28.137
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=Barry215!
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0


jwt.secret = blog_jwt
jwt.expiration = 86400

#示例
spring.kaptcha.properties.kaptcha.textproducer.char.string=0123456789ABCDEFGHIJKLMNPQRSTUVWXYZ
spring.kaptcha.properties.kaptcha.textproducer.char.length=4
spring.kaptcha.properties.kaptcha.border=no
spring.kaptcha.properties.kaptcha.image.width=80
spring.kaptcha.properties.kaptcha.image.height=35
spring.kaptcha.properties.kaptcha.border.color=105,179,90
spring.kaptcha.properties.kaptcha.textproducer.font.color=blue
spring.kaptcha.properties.kaptcha.textproducer.font.size=30
spring.kaptcha.properties.kaptcha.textproducer.font.names=宋体,宋体,宋体,宋体
spring.kaptcha.properties.kaptcha.obscurificator.impl=com.google.code.kaptcha.impl.WaterRipple
spring.kaptcha.properties.kaptcha.session.key=code
spring.kaptcha.properties.kaptcha.noise.color=white
spring.kaptcha.properties.kaptcha.background.clear.from=white
spring.kaptcha.properties.kaptcha.background.clear.to=white

#	kaptcha.border  是否有边框  默认为true  我们可以自己设置yes，no
#	kaptcha.border.color   边框颜色   默认为Color.BLACK
#	kaptcha.border.thickness  边框粗细度  默认为1
#	kaptcha.producer.impl   验证码生成器  默认为DefaultKaptcha
#	kaptcha.textproducer.impl   验证码文本生成器  默认为DefaultTextCreator
#	kaptcha.textproducer.char.string   验证码文本字符内容范围  默认为abcde2345678gfynmnpwx
#	kaptcha.textproducer.char.length   验证码文本字符长度  默认为5
#	kaptcha.textproducer.font.names    验证码文本字体样式  默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)
#	kaptcha.textproducer.font.size   验证码文本字符大小  默认为40
#	kaptcha.textproducer.font.color  验证码文本字符颜色  默认为Color.BLACK
#	kaptcha.textproducer.char.space  验证码文本字符间距  默认为2
#	kaptcha.noise.impl    验证码噪点生成对象  默认为DefaultNoise
#	kaptcha.noise.color   验证码噪点颜色   默认为Color.BLACK
#	kaptcha.obscurificator.impl   验证码样式引擎  默认为WaterRipple
#	kaptcha.word.impl   验证码文本字符渲染   默认为DefaultWordRenderer
#	kaptcha.background.impl   验证码背景生成器   默认为DefaultBackground
#	kaptcha.background.clear.from   验证码背景颜色渐进   默认为Color.LIGHT_GRAY
#	kaptcha.background.clear.to   验证码背景颜色渐进   默认为Color.WHITE
#	kaptcha.image.width   验证码图片宽度  默认为200
#	kaptcha.image.height  验证码图片高度  默认为50