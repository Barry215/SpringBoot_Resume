<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.frank.dao.ArticleMapper">
    <resultMap id="BaseResultMap" type="com.frank.model.Article">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="version" jdbcType="VARCHAR" property="version"/>
        <result column="browse_count" jdbcType="INTEGER" property="browseCount"/>
        <result column="has_published" jdbcType="INTEGER" property="hasPublished"/>
        <result column="document_id" jdbcType="INTEGER" property="documentId"/>
        <result column="archive" jdbcType="VARCHAR" property="archive"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="state" jdbcType="INTEGER" property="state"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.frank.model.Article">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        SELECT
            id,
            title,
            version,
            browse_count,
            has_published,
            document_id,
            archive,
            create_time,
            update_time,
            state,
            content
        FROM article
        WHERE id = #{id,jdbcType=INTEGER}
        and state = 1
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE FROM article
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.frank.model.Article">
        INSERT INTO article (id, title, version,
                             browse_count, has_published, document_id,
                             archive, create_time, update_time,
                             state, content)
        VALUES (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{version,jdbcType=VARCHAR},
                                        #{browseCount,jdbcType=INTEGER}, #{hasPublished,jdbcType=INTEGER},
                                        #{documentId,jdbcType=INTEGER},
                                        #{archive,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
                                        #{updateTime,jdbcType=TIMESTAMP},
                                        #{state,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.frank.model.Article" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into article
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="version != null">
                version,
            </if>
            <if test="browseCount != null">
                browse_count,
            </if>
            <if test="hasPublished != null">
                has_published,
            </if>
            <if test="documentId != null">
                document_id,
            </if>
            <if test="archive != null">
                archive,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                #{version,jdbcType=VARCHAR},
            </if>
            <if test="browseCount != null">
                #{browseCount,jdbcType=INTEGER},
            </if>
            <if test="hasPublished != null">
                #{hasPublished,jdbcType=INTEGER},
            </if>
            <if test="documentId != null">
                #{documentId,jdbcType=INTEGER},
            </if>
            <if test="archive != null">
                #{archive,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.frank.model.Article">
        update article
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=VARCHAR},
            </if>
            <if test="browseCount != null">
                browse_count = #{browseCount,jdbcType=INTEGER},
            </if>
            <if test="hasPublished != null">
                has_published = #{hasPublished,jdbcType=INTEGER},
            </if>
            <if test="documentId != null">
                document_id = #{documentId,jdbcType=INTEGER},
            </if>
            <if test="archive != null">
                archive = #{archive,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.frank.model.Article">
        UPDATE article
        SET title         = #{title,jdbcType=VARCHAR},
            version       = #{version,jdbcType=VARCHAR},
            browse_count  = #{browseCount,jdbcType=INTEGER},
            has_published = #{hasPublished,jdbcType=INTEGER},
            document_id   = #{documentId,jdbcType=INTEGER},
            archive       = #{archive,jdbcType=VARCHAR},
            create_time   = #{createTime,jdbcType=TIMESTAMP},
            update_time   = #{updateTime,jdbcType=TIMESTAMP},
            state         = #{state,jdbcType=INTEGER},
            content       = #{content,jdbcType=LONGVARCHAR}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.frank.model.Article">
        UPDATE article
        SET title         = #{title,jdbcType=VARCHAR},
            version       = #{version,jdbcType=VARCHAR},
            browse_count  = #{browseCount,jdbcType=INTEGER},
            has_published = #{hasPublished,jdbcType=INTEGER},
            document_id   = #{documentId,jdbcType=INTEGER},
            archive       = #{archive,jdbcType=VARCHAR},
            create_time   = #{createTime,jdbcType=TIMESTAMP},
            update_time   = #{updateTime,jdbcType=TIMESTAMP},
            state         = #{state,jdbcType=INTEGER}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectEditArticle" resultMap="ResultMapWithBLOBs">
        SELECT
            id,
            title,
            version,
            browse_count,
            has_published,
            document_id,
            archive,
            create_time,
            update_time,
            state,
            content
        FROM article
        WHERE has_published = 0
        and state = 1
        order by id desc
    </select>
    <select id="selectDocuments" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        SELECT
        article.id,
        title,
        version,
        browse_count,
        has_published,
        document_id,
        archive,
        create_time,
        update_time,
        article.state,
        content
        FROM article
        RIGHT JOIN document
        on document.show_id = article.id
        WHERE document.state = 1
        and article.state = 1
        order by document.id desc
        limit #{offset,jdbcType=INTEGER} , 8
    </select>
    <select id="selectHistoryArticles" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        SELECT
        id,
        title,
        version,
        browse_count,
        has_published,
        document_id,
        archive,
        create_time,
        update_time,
        state,
        content
        FROM article
        WHERE document_id = #{document_id,jdbcType=INTEGER}
        and state = 1
        and has_published = 1
        order by id desc
    </select>
    <select id="selectArchiveDocuments" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        SELECT
        article.id,
        title,
        version,
        browse_count,
        has_published,
        document_id,
        archive,
        create_time,
        update_time,
        article.state,
        content
        FROM article
        right join document
        on document.show_id = article.id
        WHERE article.state = 1
        and document.state = 1
        ORDER BY archive
        limit #{offset,jdbcType=INTEGER} , 8
    </select>
    <select id="selectArchiveCount" resultType="java.lang.Integer">
        SELECT
        count(DISTINCT archive)
        FROM article
        where state = 1
        and has_published = 1
    </select>
    <select id="selectArticleByVersion" resultType="java.lang.Integer">
        SELECT
        id
        FROM article
        where document_id = #{document_id,jdbcType=INTEGER}
        and version = #{version,jdbcType=VARCHAR}
    </select>
</mapper>